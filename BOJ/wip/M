use std::{collections::HashMap, io::Write};

use segtree_lazy::{MonoidAction, SegTree};

mod simple_io {
    pub struct InputAtOnce<'a> {
        _buf: String,
        iter: std::str::SplitAsciiWhitespace<'a>,
    }

    impl<'a> InputAtOnce<'a> {
        pub fn token(&mut self) -> &'a str {
            self.iter.next().unwrap_or_default()
        }

        pub fn value<T: std::str::FromStr>(&mut self) -> T
        where
            T::Err: std::fmt::Debug,
        {
            self.token().parse().unwrap()
        }
    }

    pub fn stdin<'a>() -> InputAtOnce<'a> {
        let _buf = std::io::read_to_string(std::io::stdin()).unwrap();
        let iter = _buf.split_ascii_whitespace();
        let iter = unsafe { std::mem::transmute(iter) };
        InputAtOnce { _buf, iter }
    }

    pub fn stdout() -> std::io::BufWriter<std::io::Stdout> {
        std::io::BufWriter::new(std::io::stdout())
    }
}

pub mod segtree_lazy {
    use std::{iter, ops::Range};

    pub trait MonoidAction {
        type X;
        type F;
        const IS_X_COMMUTATIVE: bool = false; // TODO
        fn id(&self) -> Self::X;
        fn combine(&self, lhs: &Self::X, rhs: &Self::X) -> Self::X;
        fn id_action(&self) -> Self::F;
        fn combine_action(&self, lhs: &Self::F, rhs: &Self::F) -> Self::F;
        fn apply_to_sum(&self, f: &Self::F, x_count: u32, x_sum: &mut Self::X);
    }

    pub struct SegTree<M: MonoidAction> {
        n: usize,
        max_height: u32,
        sum: Vec<M::X>,
        lazy: Vec<M::F>,
        ma: M,
    }

    impl<M: MonoidAction> SegTree<M> {
        pub fn with_size(n: usize, ma: M) -> Self {
            Self {
                n,
                max_height: usize::BITS - n.leading_zeros(),
                sum: iter::repeat_with(|| ma.id()).take(2 * n).collect(),
                lazy: iter::repeat_with(|| ma.id_action()).take(n).collect(),
                ma,
            }
        }

        pub fn from_iter<I>(iter: I, ma: M) -> Self
        where
            I: IntoIterator<Item = M::X>,
            I::IntoIter: ExactSizeIterator,
        {
            let iter = iter.into_iter();
            let n = iter.len();
            let mut sum: Vec<_> = (iter::repeat_with(|| ma.id()).take(n))
                .chain(
                    iter.into_iter()
                        .chain(iter::repeat_with(|| ma.id()))
                        .take(n),
                )
                .collect();
            for i in (1..n).rev() {
                sum[i] = ma.combine(&sum[i << 1], &sum[i << 1 | 1]);
            }
            Self {
                n,
                max_height: usize::BITS - n.leading_zeros(),
                sum,
                lazy: iter::repeat_with(|| ma.id_action()).take(n).collect(),
                ma,
            }
        }

        fn apply(&mut self, idx: usize, width: u32, value: &M::F) {
            self.ma.apply_to_sum(&value, width, &mut self.sum[idx]);
            if idx < self.n {
                self.lazy[idx] = self.ma.combine_action(&value, &self.lazy[idx]);
            }
        }

        fn push_down(&mut self, width: u32, node: usize) {
            let value = unsafe { &*(&self.lazy[node] as *const _) };
            self.apply(node << 1, width, value);
            self.apply(node << 1 | 1, width, value);
            self.lazy[node] = self.ma.id_action();
        }

        fn push_range(&mut self, range: Range<usize>) {
            let Range { mut start, mut end } = range;
            start += self.n;
            end += self.n;

            let start_height = 1 + start.trailing_zeros();
            let end_height = 1 + end.trailing_zeros();
            for height in (start_height..=self.max_height).rev() {
                let width = 1 << height - 1;
                self.push_down(width, start >> height);
            }
            for height in (end_height..=self.max_height).rev().skip_while(|&height| {
                height >= start_height && end - 1 >> height == start >> height
            }) {
                let width = 1 << height - 1;
                self.push_down(width, end - 1 >> height);
            }
        }

        fn pull_up(&mut self, node: usize) {
            self.sum[node] = (self.ma).combine(&self.sum[node << 1], &self.sum[node << 1 | 1]);
        }

        pub fn apply_range(&mut self, range: Range<usize>, value: M::F) {
            let Range { mut start, mut end } = range;
            debug_assert!(start <= end && end <= self.n);
            if start == end {
                return;
            }

            self.push_range(range);
            start += self.n;
            end += self.n;
            let mut width: u32 = 1;
            let (mut pull_start, mut pull_end) = (false, false);
            while start < end {
                if pull_start {
                    self.pull_up(start - 1);
                }
                if pull_end {
                    self.pull_up(end);
                }
                if start & 1 != 0 {
                    self.apply(start, width, &value);
                    start += 1;
                    pull_start = true;
                }
                if end & 1 != 0 {
                    self.apply(end - 1, width, &value);
                    pull_end = true;
                }
                start >>= 1;
                end >>= 1;
                width <<= 1;
            }
            start -= 1;
            while end > 0 {
                if pull_start {
                    self.pull_up(start);
                }
                if pull_end && !(pull_start && start == end) {
                    self.pull_up(end);
                }
                start >>= 1;
                end >>= 1;
                width <<= 1;
            }
        }

        pub fn query_range(&mut self, range: Range<usize>) -> M::X {
            let Range { mut start, mut end } = range;

            self.push_range(range);
            start += self.n;
            end += self.n;
            if M::IS_X_COMMUTATIVE {
                let mut result = self.ma.id();
                while start < end {
                    if start & 1 != 0 {
                        result = self.ma.combine(&result, &self.sum[start]);
                        start += 1;
                    }
                    if end & 1 != 0 {
                        end -= 1;
                        result = self.ma.combine(&result, &self.sum[end]);
                    }
                    start >>= 1;
                    end >>= 1;
                }
                result
            } else {
                let (mut result_left, mut result_right) = (self.ma.id(), self.ma.id());
                while start < end {
                    if start & 1 != 0 {
                        result_left = self.ma.combine(&result_left, &self.sum[start]);
                    }
                    if end & 1 != 0 {
                        result_right = self.ma.combine(&self.sum[end - 1], &result_right);
                    }
                    start = (start + 1) >> 1;
                    end >>= 1;
                }
                self.ma.combine(&result_left, &result_right)
            }
        }

        pub fn query_all(&mut self) -> &M::X {
            assert!(self.n.is_power_of_two());
            self.push_down(self.n as u32, 1);
            &self.sum[1]
        }

        // The following two lines are equivalent.
        // partition_point(0, n, |i| pred(segtree.query_range(0..i+1)));
        // segtree.partition_point_prefix(|prefix| pred(prefix));
        pub fn partition_point_prefix(&mut self, mut pred: impl FnMut(&M::X) -> bool) -> usize {
            assert!(self.n >= 1 && self.n.is_power_of_two());

            let mut u = 1;
            let mut width = self.n as u32;
            let mut prefix = self.ma.id();

            while u < self.n {
                width >>= 1;
                self.push_down(width, u);

                let new_prefix = self.ma.combine(&prefix, &self.sum[u << 1]);
                u = if pred(&new_prefix) {
                    prefix = new_prefix;
                    u << 1 | 1
                } else {
                    u << 1
                };
            }

            let idx = u - self.n;
            if pred(&self.ma.combine(&prefix, &self.sum[u])) {
                idx + 1
            } else {
                idx
            }
        }
    }
}

// Extended euclidean algorithm
// find (d, x, y) satisfying d = gcd(a, b) and a * x + b * y = d
fn egcd(a: u32, b: u32) -> (u32, i32, i32) {
    let (mut c, mut x, mut y) = if a > b {
        ((a, b), (1, 0), (0, 1))
    } else {
        ((b, a), (0, 1), (1, 0))
    };

    while c.1 > 0 {
        let q = c.0 / c.1;
        x = (x.1, (x.0 - (q as i32) * x.1));
        y = (y.1, (y.0 - (q as i32) * y.1));
        c = (c.1, c.0 % c.1);
    }
    (c.0, x.0, y.0)
}

fn crt(a1: u32, m1: u32, a2: u32, m2: u32) -> Option<(u32, u32)> {
    let (d, x, _y) = egcd(m1, m2);
    let m = m1 / d * m2;
    let da = ((a2 as i32 - a1 as i32) % m as i32 + m as i32) as u32 % m;
    if da % d != 0 {
        return None;
    }
    let mut x = ((x % m as i32) + m as i32) as u32 % m;
    x = (da / d % m) * x % m;
    let a = (a1 + m1 * x) % m;

    Some((a, m))
}

const UNSET: u32 = !0 / 4;

#[derive(Default, Debug)]
struct IntervalSum {
    s4: [i64; 4],
    s5: [i64; 5],
    s6: [i64; 6],

    ends: [u32; 2],
}

#[derive(Default, Debug)]
struct SkippedAdd {
    d4: [i64; 4],
    d5: [i64; 5],
    d6: [i64; 6],
}

struct SkippedSum;

struct Precalc {
    crt: HashMap<[u8; 4], [u8; 2]>,
}

impl Precalc {
    fn new() -> Self {
        let mut crt_cached = HashMap::new();
        for d0 in 1..=6 {
            for d1 in 1..=6 {
                for rem0 in 0..d0 {
                    for rem1 in 0..d1 {
                        if let Some((rem, d)) = crt(rem0, d0, rem1, d1) {
                            crt_cached.insert(
                                [d0 as u8, rem0 as u8, d1 as u8, rem1 as u8],
                                [d as u8, rem as u8],
                            );
                        }
                    }
                }
            }
        }

        Self { crt: crt_cached }
    }

    fn crt(&self, d0: u32, rem0: u32, d1: u32, rem1: u32) -> Option<[u32; 2]> {
        let res = self
            .crt
            .get(&[d0 as u8, rem0 as u8, d1 as u8, rem1 as u8])?;
        Some([res[0] as u32, res[1] as u32])
    }
}

thread_local! {
    static PRECALC: Precalc = Precalc::new();
}

fn skeleton_inter(ends: [u32; 2], d0: u32, rem0: u32, d1: u32, rem1: u32) -> u32 {
    let Some([d, rem]) = PRECALC.with(|precalc| precalc.crt(d0, rem0, d1, rem1)) else {
        return 0;
    };

    let r = (d * 4 + ends[1] - rem) / d;
    let l = (d * 4 + ends[0] - 1 - rem) / d;
    r - l
}

fn skeleton_point(i: u32, d0: u32, rem0: u32) -> u32 {
    skeleton_inter([i, i], d0, rem0, d0, rem0)
}

fn add<const N: usize>(lhs: [i64; N], rhs: [i64; N]) -> [i64; N] {
    std::array::from_fn(|i| lhs[i] + rhs[i])
}

impl IntervalSum {
    fn singleton(u: u32, x: i64) -> Self {
        fn cons<const D: usize>(u: u32, x: i64) -> [i64; D] {
            std::array::from_fn(|rem| x * skeleton_point(u as u32, D as u32, rem as u32) as i64)
        }

        let res = Self {
            s4: cons(u, x),
            s5: cons(u, x),
            s6: cons(u, x),

            ends: [u, u],
        };
        res
    }

    fn get(&self, d: u32, rem: u32) -> i64 {
        match d {
            1 => (0..4).map(|rem| self.s4[rem]).sum(),
            2 => (0..4)
                .skip(rem as usize)
                .step_by(2)
                .map(|rem| self.s4[rem])
                .sum(),
            3 => (0..6)
                .skip(rem as usize)
                .step_by(3)
                .map(|rem| self.s6[rem])
                .sum(),
            4 => self.s4[rem as usize],
            5 => self.s5[rem as usize],
            6 => self.s6[rem as usize],
            _ => panic!(),
        }
    }
}

impl SkippedAdd {
    fn singleton(s: u32, rem_s: u32, x: i64) -> Self {
        match s {
            1 => {
                return (0..4)
                    .map(|rem| Self::singleton(4, rem, x))
                    .reduce(|acc, x| SkippedSum.combine_action(&acc, &x))
                    .unwrap()
            }
            2 => {
                return (0..4)
                    .skip(rem_s as usize)
                    .step_by(2)
                    .map(|rem| Self::singleton(4, rem, x))
                    .reduce(|acc, x| SkippedSum.combine_action(&acc, &x))
                    .unwrap()
            }
            3 => {
                return (0..6)
                    .skip(rem_s as usize)
                    .step_by(3)
                    .map(|rem| Self::singleton(6, rem, x))
                    .reduce(|acc, x| SkippedSum.combine_action(&acc, &x))
                    .unwrap()
            }
            _ => {
                fn cons<const D: usize>(s: u32, rem_s: u32, x: i64) -> [i64; D] {
                    std::array::from_fn(|rem_d| {
                        if (D as u32, rem_d as u32) == (s, rem_s) {
                            x
                        } else {
                            0
                        }
                    })
                }

                Self {
                    d4: cons(s, rem_s, x),
                    d5: cons(s, rem_s, x),
                    d6: cons(s, rem_s, x),
                }
            }
        }
    }
}

impl MonoidAction for SkippedSum {
    type X = IntervalSum;
    type F = SkippedAdd;

    fn id(&self) -> Self::X {
        IntervalSum {
            s4: [0; 4],
            s5: [0; 5],
            s6: [0; 6],
            ends: [UNSET, UNSET - 1],
        }
    }

    fn combine(&self, lhs: &Self::X, rhs: &Self::X) -> Self::X {
        IntervalSum {
            s4: add(lhs.s4, rhs.s4),
            s5: add(lhs.s5, rhs.s5),
            s6: add(lhs.s6, rhs.s6),

            ends: [
                if lhs.ends[0] != UNSET {
                    lhs.ends[0]
                } else {
                    rhs.ends[0]
                },
                if rhs.ends[1] != UNSET - 1 {
                    rhs.ends[1]
                } else {
                    lhs.ends[1]
                },
            ],
        }
    }

    fn id_action(&self) -> Self::F {
        Default::default()
    }

    fn combine_action(&self, lhs: &Self::F, rhs: &Self::F) -> Self::F {
        SkippedAdd {
            d4: add(lhs.d4, rhs.d4),
            d5: add(lhs.d5, rhs.d5),
            d6: add(lhs.d6, rhs.d6),
        }
    }

    fn apply_to_sum(&self, f: &Self::F, _x_count: u32, x_sum: &mut Self::X) {
        fn apply_d<const D: usize>(f: [i64; D], x_sum: &mut IntervalSum) {
            fn apply_s<const S: usize, const D: usize>(
                f: [i64; D],
                x_sum: &mut [i64; S],
                ends: [u32; 2],
            ) {
                for rem_d in 0..D {
                    for rem_s in 0..S {
                        x_sum[rem_s] += f[rem_d]
                            * skeleton_inter(ends, S as u32, rem_s as u32, D as u32, rem_d as u32)
                                as i64;
                    }
                }
            }
            apply_s(f, &mut x_sum.s4, x_sum.ends);
            apply_s(f, &mut x_sum.s5, x_sum.ends);
            apply_s(f, &mut x_sum.s6, x_sum.ends);
        }
        apply_d(f.d4, x_sum);
        apply_d(f.d5, x_sum);
        apply_d(f.d6, x_sum);
    }
}

fn main() {
    let mut input = simple_io::stdin();
    let mut output = simple_io::stdout();

    let n: usize = input.value();
    let q: usize = input.value();

    let ws = (0..n)
        .map(|_| input.value())
        .chain(std::iter::repeat(0))
        .take(n.next_power_of_two())
        .collect::<Vec<_>>();
    let ws = ws
        .into_iter()
        .enumerate()
        .map(|(u, x)| IntervalSum::singleton(u as u32, x));
    let mut st = SegTree::from_iter(ws, SkippedSum);

    for _ in 0..q {
        let cmd = input.token();
        let l = input.value::<usize>() - 1;
        let r = input.value::<usize>() - 1;
        let d: u32 = input.value();
        let rem = l as u32 % d;

        match cmd {
            "1" => {
                let x: i64 = input.value();

                st.apply_range(l..r + 1, SkippedAdd::singleton(d, rem, x));
            }
            _ => {
                let ans = st.query_range(l..r + 1).get(d, rem);
                writeln!(output, "{}", ans).unwrap();
            }
        }
    }
}
